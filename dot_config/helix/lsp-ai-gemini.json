{
  "initializationOptions": {
    "memory": {
      "file_store": {}
    },

    "models": {
      "model2": {
        "type": "open_ai",
        "chat_endpoint": "https://api.openai.com/v1/chat/completions",
        "model": "gpt-4o",
        "auth_token_env_var_name": "OPENAI_API_KEY"
      },
      "model1": {
        "type": "gemini",
        "chat_endpoint": "https://generativelanguage.googleapis.com/v1beta/models/",
        "model": "gemini-2.0-flash-exp",
        "auth_token_env_var_name": "GEMINI_API_KEY"
      }
    },
    "chat": [
      {
        "trigger": "!C",
        "action_display_name": "Chat",
        "model": "model1",
        "parameters": {
          "max_context": 4096,
          "max_tokens": 1024,
          "system": "You are a code assistant chatbot. The user will ask you for assistance coding and you will do you best to answer succinctly and accurately",
          "systemInstruction": {
            "role": "system",
            "parts": [
              {
                "text": "You are a code assistant chatbot. The user will ask you for assistance coding and you will do you best to answer succinctly and accurately"
              }
            ]
          },
          "contents": [
            {
              "role": "system",
              "parts": [
                {
                  "text": "You are a code assistant chatbot. The user will ask you for assistance coding and you will do you best to answer succinctly and accurately"
                }
              ]
            }
          ]
        }
      },
      {
        "trigger": "!CC",
        "action_display_name": "Chat with context",
        "model": "model1",
        "parameters": {
          "max_context": 4096,
          "max_tokens": 1024,
          "system": "You are a code assistant chatbot. The user will ask you for assistance coding and you will do you best to answer succinctly and accurately given the code context:\n\n{CONTEXT}"
        }
      }
    ],
    "actions": [
      {
        "action_display_name": "GenDoc",
        "model": "model1",
        "parameters": {
          "max_context": 4096,
          "max_tokens": 4096,

          "system": "Generate documentation for the following Go function.  Provide a concise description of the function's purpose in 1-2 sentences. Do not modify the provided function code in any way, and do not add any code fences or delimiters.  Just return the description followed by the function code itself.",
          "messages": [
            {
              "role": "user",
              "content": "{SELECTED_TEXT}"
            }
          ],
          "systemInstruction": {
            "role": "system",
            "parts": [
              {
                "text": "Generate documentation for the following Go function.  Provide a concise description of the function's purpose in 1-2 sentences. Do not modify the provided function code in any way, and do not add any code fences or delimiters.  Just return the description followed by the function code itself."
              }
            ]
          },
          "contents": [
            {
              "role": "user",
              "parts": [
                {
                  "text": "{SELECTED_TEXT}"
                }
              ]
            }
          ]
        }
      },
      {
        "action_display_name": "SwaggDocumentation",
        "model": "model1",
        "parameters": {
          "max_context": 4096,
          "max_tokens": 4096,

          "system": "You are an AI coding assistant. Your task is to complete the documentation for this function suing the swagger standard and the code in this context. The user's cursor position is marked by \"<CURSOR>\". Follow these steps:\n \n 1. Analyze the code context, selected function and the cursor position.\n 2. Determine the appropriate documentation tags based on the swagger standard.\n 3. Determine the appropriate documentation tags to complete the current thought, including finishing partial words or lines.\n 4. Prepend \"<CURSOR>\" with the documentation you generated do not add anything else to the oputput, ensure proper formatting and line breaks.\n \n Pay special attention to completing partial words or lines before adding new lines of code.\n \n DO NOT ADD ``` to enclose your results ",
          "messages": [
            {
              "role": "user",
              "content": "{CODE}"
            }
          ]
        }
      },
      {
        "action_display_name": "Complete",
        "model": "model1",
        "parameters": {
          "systemInstruction": {
            "role": "system",
            "parts": [
              {
                "text": "You are an AI coding assistant. Your task is to complete code snippets. The user's cursor position is marked by <CURSOR>. Follow these steps: 1. Analyze the code context and the cursor position. 2. Provide your chain of thought reasoning, wrapped in <reasoning> tags. Include thoughts about the cursor position, what needs to be completed, and any necessary formatting. 3. Determine the appropriate code to complete the current thought, including finishing partial words or lines. 4. Replace <CURSOR> with the necessary code, ensuring proper formatting. 5. Wrap your code solution in <answer> tags. Your response should always include both the reasoning and the answer. Pay special attention to completing partial words or lines before adding new lines of code.  DO NOT RETURN HIDDEN CHARACTERS LIKE \n\t or any code fencing. Please Remove any special characters or escape secuences"
              }
            ]
          },
          "max_context": 4096,
          "max_tokens": 4096,
          "contents": [
            {
              "role": "user",
              "parts": [{ "text": "{CODE}" }]
            }
          ]
        },
        "post_process": {
          "extractor": "(?s)<answer>(.*?)</answer>"
        }
      },
      {
        "action_display_name": "Refactor",
        "model": "model1",
        "parameters": {
          "max_context": 4096,
          "max_tokens": 4096,
          "system": "You are an AI coding assistant specializing in code refactoring. Your task is to analyze the given code snippet and provide a refactored version. Follow these steps:\n\n1. Analyze the code context and structure.\n2. Identify areas for improvement, such as code efficiency, readability, or adherence to best practices.\n3. Provide your chain of thought reasoning, wrapped in <reasoning> tags. Include your analysis of the current code and explain your refactoring decisions.\n4. Rewrite the entire code snippet with your refactoring applied.\n5. Wrap your refactored code solution in <answer> tags.\n\nYour response should always include both the reasoning and the refactored code.\n\n<examples>\n<example>\nUser input:\ndef calculate_total(items):\n    total = 0\n    for item in items:\n        total = total + item['price'] * item['quantity']\n    return total\n\n\nResponse:\n<reasoning>\n1. The function calculates the total cost of items based on price and quantity.\n2. We can improve readability and efficiency by:\n   a. Using a more descriptive variable name for the total.\n   b. Utilizing the sum() function with a generator expression.\n   c. Using augmented assignment (+=) if we keep the for loop.\n3. We'll implement the sum() function approach for conciseness.\n4. We'll add a type hint for better code documentation.\n</reasoning>\n<answer>\nfrom typing import List, Dict\n\ndef calculate_total(items: List[Dict[str, float]]) -> float:\n    return sum(item['price'] * item['quantity'] for item in items)\n</answer>\n</example>\n\n<example>\nUser input:\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\nResponse:\n<reasoning>\n1. This function checks if a number is prime, but it's not efficient for large numbers.\n2. We can improve it by:\n   a. Adding an early return for 2, the only even prime number.\n   b. Checking only odd numbers up to the square root of n.\n   c. Using a more efficient range (start at 3, step by 2).\n3. We'll also add a type hint for better documentation.\n4. The refactored version will be more efficient for larger numbers.\n</reasoning>\n<answer>\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n</answer>\n</example>\n</examples>",
          "messages": [
            {
              "role": "user",
              "content": "{SELECTED_TEXT}"
            }
          ]
        },
        "post_process": {
          "extractor": "(?s)<answer>(.*?)</answer>"
        }
      }
    ],
    "completion": {
      "model": "model1",
      "parameters": {
        "max_context": 2048,
        "max_tokens": 128,

        "systemInstruction": {
          "role": "system",
          "parts": [
            {
              "text": "Instructions:\n- You are an AI programming assistant.\n- Given a piece of code with the cursor location marked by \"<CURSOR>\", replace \"<CURSOR>\" with the correct code or comment.\n- First, think step-by-step.\n- Describe your plan for what to build in pseudocode, written out in great detail.\n- Then output the code replacing the \"<CURSOR>\"\n- Ensure that your completion fits within the language context of the provided code snippet (e.g., Python, JavaScript, Rust).\n\nRules:\n- Only respond with code or comments.\n- Only replace \"<CURSOR>\"; do not include any previously written code.\n- Never include \"<CURSOR>\" in your response\n- If the cursor is within a comment, complete the comment meaningfully.\n- Handle ambiguous cases by providing the most contextually appropriate completion.\n- Be consistent with your responses."
            }
          ]
        },
        "contents": [
          {
            "role": "user",
            "parts": [
              { "text": "def greet(name):    print(f\"Hello, {<CURSOR>}\")" }
            ]
          },
          {
            "role": "assistant",
            "parts": [{ "text": "name" }]
          },
          {
            "role": "user",
            "parts": [
              { "text": "function sum(a, b) {    return a + <CURSOR>;}" }
            ]
          },
          {
            "role": "assistant",
            "parts": [{ "text": "b" }]
          },
          {
            "role": "user",
            "parts": [
              {
                "text": "fn multiply(a: i32, b: i32) -> i32 {    a * <CURSOR>}"
              }
            ]
          },
          {
            "role": "assistant",
            "parts": [{ "text": "b" }]
          },
          {
            "role": "user",
            "parts": [{ "text": "# <CURSOR>def add(a, b):\n    return a + b" }]
          },
          {
            "role": "assistant",
            "parts": [{ "text": "Adds two numbers" }]
          },
          {
            "role": "user",
            "parts": [
              { "text": "# This function checks if a number is even <CURSOR>" }
            ]
          },
          {
            "role": "assistant",
            "parts": [{ "text": "def is_even(n):    return n % 2 == 0" }]
          },
          {
            "role": "user",
            "parts": [{ "text": "{CODE}" }]
          }
        ]
      }
    }
  }
}
